
use package.builtin;
use package.array;
use package.utils;

def iterate(iterable, action) = {
  def value = iterable();
  while value != UNDEFINED {
    action(value);
    value = iterable();
  }
  false;
}

def onNothing() = constantly(UNDEFINED);

def onNumbersBetween(start, exEnd) = function {
  if (start < exEnd) {
    return(start): { start = start + 1; }
  } else {
    UNDEFINED;
  }
}

def onNumbersAfter(start) = function {
  return(start): { start = start + 1; }
}

def iterator(iterable) = package {
  def __APPLY__() = iterable();
  def toArray() = such([]): {
    iterate(iterable): ~(elt) { push(elt, it); }
  }
  def fold(init, folder) = {
    def acc = init;
    iterate(iterable): ~(elt) {
      acc = folder(acc, elt);
    }
    acc;
  }
  def all(predict) = fold(true): ~(acc, elt) {
    acc && predict(elt);
  }
  def any(predict) = fold(false): ~(acc, elt) {
    acc || predict(elt);
  }
  def forAllElements(action) = {
    action = if action == NOT_PROVIDED {
      constantly(UNDEFINED);
    } else {
      action;
    }
    iterate(iterable, action);
    false;
  }
  def map(mapper) = iterator(): {
    def value = iterable();
    if value == UNDEFINED {
      UNDEFINED;
    } else {
      mapper(value);
    }
  }
  def do(action) = map(): ~(elt) {
    action(elt);
    elt;
  }
  def filter(condition) = iterator(): {
    def value = iterable();
    while value != UNDEFINED && !condition(value) {
      value = iterable();
    }
    value;
  }
  def take(n) = iterator(): {
    if n > 0 {
      return(iterable()): { n = n - 1; }
    } else {
      UNDEFINED;
    }
  }
  def takeWhile(condition) = iterator(): {
    def value = iterable();
    if value != UNDEFINED && condition(value) {
      value;
    } else {
      return(UNDEFINED): { iterable = onNothing(); }
    }
  }
}